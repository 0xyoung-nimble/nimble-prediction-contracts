// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";
import "../src/contracts/MockNimble.sol";

contract MockNimbleTest is Test {
    MockNimble internal mockNimble;
    uint64 internal getFee;
    uint64 internal updateFee;
    string internal updateData;

    function setUp() public {
        vm.prank(0xdAC17F958D2ee523a2206206994597C13D831ec7);
        mockNimble = new MockNimble(1, 0, 0);
        getFee = 1e6;
        vm.setEnv("flag", ",");
        vm.setEnv(
            "updateData",
            "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002a307835423338446136613730316335363835343564436663423033466342383735663536626564644334000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006f000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000043131313100000000000000000000000000000000000000000000000000000000,0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000002a30783842333844613661373031633536383534356443666342303346634238373566353662656464433800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000de
        );
    }

    function testUpdateFeeForGetPrediction() public {
        vm.prank(0xdAC17F958D2ee523a2206206994597C13D831ec7);
        mockNimble.updateFeeForGetPrediction(getFee);
    }

    function testUpdateFeeForGetPredictionError() public {
        vm.expectRevert("caller not the owner");
        vm.prank(0xB8c77482e45F1F44dE1745F52C74426C631bDD52);
        mockNimble.updateFeeForGetPrediction(getFee);
    }

    function testGetPredictionFeed() public {
        vm.expectRevert(0x69c34a6c);
        vm.prank(0xB8c77482e45F1F44dE1745F52C74426C631bDD52);
        mockNimble.getPredictionFeed(
            "0xAE95131f2414FA7062B1C056918da294c3D8D8F1"
        );
    }

    function testInsufficientValue(address x) public {
        mockNimble = new MockNimble(1, 1e8, 0);
        vm.prank(x);
        vm.expectRevert("insufficient value");
        mockNimble.getPredictionFeed(
            "0xAE95131f2414FA7062B1C056918da294c3D8D8F1"
        );
    }
}
